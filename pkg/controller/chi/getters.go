// Copyright 2019 Altinity Ltd and/or its affiliates. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package chi

import (
	"fmt"

	chiv1 "github.com/altinity/clickhouse-operator/pkg/apis/clickhouse.altinity.com/v1"
	chopmodel "github.com/altinity/clickhouse-operator/pkg/model"
	apps "k8s.io/api/apps/v1"
	core "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	meta "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// getConfigMap gets ConfigMap either by namespaced name or by labels
// TODO review byNameOnly params
func (c *Controller) getConfigMap(objMeta *meta.ObjectMeta, byNameOnly bool) (*core.ConfigMap, error) {
	// Check whether object with such name already exists in k8s
	if res, err := c.configMapLister.ConfigMaps(objMeta.Namespace).Get(objMeta.Name); res != nil {
		// Object found by name
		return res, nil
	} else if apierrors.IsNotFound(err) {
		errNotFound := err
		if byNameOnly {
			return nil, errNotFound
		}
		// Try to find by labels
		if selector, err := chopmodel.GetSelectorFromObjectMeta(objMeta); err != nil {
			return nil, err
		} else if objects, err := c.configMapLister.ConfigMaps(objMeta.Namespace).List(selector); err != nil {
			return nil, err
		} else if len(objects) == 0 {
			return nil, errNotFound
		} else if len(objects) == 1 {
			// Exactly one object found by labels
			return objects[0], nil
		} else {
			// Too much object found by labels
			return nil, fmt.Errorf("too much objects found %d expecting 1", len(objects))
		}
	} else {
		// Error, which is not related to "Object not found"
		return nil, err
	}

	return nil, fmt.Errorf("unexpected flow")
}

// getService gets Service either by namespaced name or by labels
// TODO review byNameOnly params
func (c *Controller) getService(objMeta *meta.ObjectMeta, byNameOnly bool) (*core.Service, error) {
	// Check whether object with such name already exists in k8s
	if res, err := c.serviceLister.Services(objMeta.Namespace).Get(objMeta.Name); res != nil {
		// Object found by name
		return res, nil
	} else if apierrors.IsNotFound(err) {
		errNotFound := err
		if byNameOnly {
			return nil, errNotFound
		}
		// Try to find by labels
		if selector, err := chopmodel.GetSelectorFromObjectMeta(objMeta); err != nil {
			return nil, err
		} else if objects, err := c.serviceLister.Services(objMeta.Namespace).List(selector); err != nil {
			return nil, err
		} else if len(objects) == 0 {
			return nil, errNotFound
		} else if len(objects) == 1 {
			// Exactly one object found by labels
			return objects[0], nil
		} else {
			// Too much object found by labels
			return nil, fmt.Errorf("too much objects found %d expecting 1", len(objects))
		}
	} else {
		// Error, which is not related to "Object not found"
		return nil, err
	}

	return nil, fmt.Errorf("unexpected flow")
}

// getStatefulSet gets StatefulSet either by namespaced name or by labels
// TODO review byNameOnly params
func (c *Controller) getStatefulSet(objMeta *meta.ObjectMeta, byNameOnly bool) (*apps.StatefulSet, error) {
	// Check whether object with such name already exists in k8s
	if res, err := c.statefulSetLister.StatefulSets(objMeta.Namespace).Get(objMeta.Name); res != nil {
		// Object found by name
		return res, nil
	} else if apierrors.IsNotFound(err) {
		errNotFound := err
		if byNameOnly {
			return nil, errNotFound
		}
		// Try to find by labels
		if selector, err := chopmodel.GetSelectorFromObjectMeta(objMeta); err != nil {
			return nil, err
		} else if objects, err := c.statefulSetLister.StatefulSets(objMeta.Namespace).List(selector); err != nil {
			return nil, err
		} else if len(objects) == 0 {
			return nil, errNotFound
		} else if len(objects) == 1 {
			// Exactly one object found by labels
			return objects[0], nil
		} else {
			// Too much object found by labels
			return nil, fmt.Errorf("too much objects found %d expecting 1", len(objects))
		}
	} else {
		// Error, which is not related to "Object not found"
		return nil, err
	}

	return nil, fmt.Errorf("unexpected flow")
}

// GetChiByObjectMeta gets CHI by namespaced name
func (c *Controller) GetChiByObjectMeta(objectMeta *meta.ObjectMeta) (*chiv1.ClickHouseInstallation, error) {
	chiName, err := chopmodel.GetChiNameFromObjectMeta(objectMeta)
	if err != nil {
		return nil, fmt.Errorf("ObjectMeta %s does not generated by CHI %v", objectMeta.Name, err)
	}

	return c.chiLister.ClickHouseInstallations(objectMeta.Namespace).Get(chiName)
}
