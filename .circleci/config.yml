version: 2
jobs:
  build_master:
    machine:
      enabled: true
#      TODO upgrade to paid plan
#      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Building Docker images
          command: |
            echo "Building Docker images"

            docker build -f dockerfile/operator/Dockerfile -t clickhouse-operator:latest .
            docker build -f dockerfile/metrics-exporter/Dockerfile -t metrics-exporter:latest .
      - run:
          name: Pushing Docker image
          command: |
            echo "Pushing version $CHO_RELEASE"

            docker tag clickhouse-operator:latest $COMPANY_REPO/clickhouse-operator:latest
            docker tag metrics-exporter:latest $COMPANY_REPO/metrics-exporter:latest

            docker login -u $DOCKER_USER -p $DOCKER_PASS

            docker push $COMPANY_REPO/clickhouse-operator:latest
            docker push $COMPANY_REPO/metrics-exporter:latest
  build_branch:
    machine:
      enabled: true
#      TODO upgrade to paid plan
#      docker_layer_caching: true

    steps:
      - checkout
      - run:
          name: Building Docker images
          command: |
            echo "Building Docker images"

            docker build -f dockerfile/operator/Dockerfile -t clickhouse-operator:dev .
            docker build -f dockerfile/metrics-exporter/Dockerfile -t metrics-exporter:dev .
      - run:
          name: Setting version
          command: |
            echo 'export CHO_RELEASE=$(cat release)' >> $BASH_ENV
      - run:
          name: Pushing Docker image
          command: |
            docker tag clickhouse-operator:dev $COMPANY_REPO/clickhouse-operator:$CHO_RELEASE
            docker tag metrics-exporter:dev $COMPANY_REPO/metrics-exporter:$CHO_RELEASE

            docker login -u $DOCKER_USER -p $DOCKER_PASS

            docker push $COMPANY_REPO/clickhouse-operator:$CHO_RELEASE
            docker push $COMPANY_REPO/metrics-exporter:$CHO_RELEASE

  # howto run test local
  # mkdir -v -m 0777 -p /circleci/home/circleci/.minikube /circleci/var/lib/docker /circleci/root/.cache
  # circleci local execute -v ${PWD}:/workdir -v /circleci/home/circleci/.minikube:/home/circleci/.minikube -v /circleci/var/lib/docker:/var/lib/docker -v /circleci/root/.cache:/root/.cache -e COMPANY_REPO=${COMPANY_REPO:-alinity} -e DOCKER_USER=${DOCKER_USER} --job=integration_tests
  integration_tests:
    machine:
      enabled: true
      image: ubuntu-1804:latest
#      TODO upgrade to paid plan
#      docker_layer_caching: true
    environment:
      K8S_VERSION: v1.18.2
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v1.9.2
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
    steps:
      # TODO fix for local builds https://github.com/CircleCI-Public/circleci-cli/issues/330
      - run:
          name: Local build handling
          command: |
            if [[ ${CIRCLE_SHELL_ENV} =~ "localbuild" ]]; then
              if [ -d /workdir ]; then
                ln -s /workdir /tmp/_circleci_local_build_repo
              else
                echo "Run this local build using: circleci build -v \$(pwd):/workdir"
                exit 1
              fi
            fi
      - checkout
      - run:
          name: Install python and testflows
          command: |
            set -xueo pipefail
            sudo python3 --version
            if [[ "0" == $(lsb_release -a | grep Ubuntu | wc -l) ]]; then
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates openssl
              sudo wget -O /etc/apt/trusted.gpg.d/unofficial-python-all.asc https://people.debian.org/~paravoid/python-all/unofficial-python-all.asc
              echo "deb http://people.debian.org/~paravoid/python-all stretch main" | sudo tee /etc/apt/sources.list.d/python-all.list
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends python3.7 python3.7-venv
            else
              # sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates openssl
              # sudo apt-get install -y --no-install-recommends software-properties-common
              # sudo add-apt-repository -y ppa:deadsnakes/ppa
              # sudo apt-get update
              # sudo apt-get install -y --no-install-recommends python3.7 python3.7-venv
              # curl https://www.openssl.org/source/openssl-1.0.2l.tar.gz | tar xz
              # cd openssl-1.0.2l && sudo ./config && sudo make && sudo make install
              # sudo ln -sf /usr/local/ssl/bin/openssl ‘which openssl’
              # cd ${HOME}
            fi
            curl -sL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 -m venv ~/clickhouse-operator/venv
            ~/clickhouse-operator/venv/bin/pip3 --version
            ~/clickhouse-operator/venv/bin/python3 get-pip.py
            ~/clickhouse-operator/venv/bin/pip3 --version
            ~/clickhouse-operator/venv/bin/pip3 install -U -r ./tests/requirements.txt
      - run:
          name: Setup minikube
          command: |
            mkdir -p /home/circleci/.minikube/cache/
            wget -c --progress=bar:force:noscroll -O /home/circleci/.minikube/cache/minikube-${MINIKUBE_VERSION} https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64
            sudo chmod +x /home/circleci/.minikube/cache/minikube-${MINIKUBE_VERSION}
            sudo ln -svf /home/circleci/.minikube/cache/minikube-${MINIKUBE_VERSION} /usr/local/bin/minikube
      - run:
          name: Start minikube
          command: |
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
            sudo apt-get install conntrack
            minikube start --driver=docker --cpus 8 --memory 4096M --kubernetes-version=${K8S_VERSION} -v=9 --addons=ingress,ingress-dns
            sudo ln -svf $(find /home/circleci/.minikube/cache/ -type f -name kubectl) /usr/local/bin/kubectl
            kubectl get nodes
      - run:
          name: Building Docker image for Integration test
          command: |
            export CHO_RELEASE=$(cat release)
            docker build -f dockerfile/operator/Dockerfile -t clickhouse-operator:e2e .
            docker build -f dockerfile/metrics-exporter/Dockerfile -t metrics-exporter:e2e .

            echo "Tag builded version as ${CHO_RELEASE}"
            docker tag clickhouse-operator:e2e ${COMPANY_REPO:-altinity}/clickhouse-operator:${CHO_RELEASE}
            docker tag metrics-exporter:e2e ${COMPANY_REPO:-altinity}/metrics-exporter:${CHO_RELEASE}
      - run:
          name: Setup YQ
          command: |
            docker pull mikefarah/yq:latest
      - run:
          name: Docker Pull required Clickhouse images
          command: |
            for image in $(docker run --rm -v "${PWD}":/workdir mikefarah/yq yq r /workdir/tests/configs/test-017-multi-version.yaml "spec.templates.podTemplates[*].spec.containers[*].image"); do
              docker pull ${image}
            done
      - run:
          name: Prepare clickhouse operator installator Environment variables
          command: |
            echo 'export OPERATOR_VERSION=$(cat release)' >> $BASH_ENV
            echo 'export BRANCH=${BRANCH:-$git_branch}' >> $BASH_ENV
            echo 'export OPERATOR_NAMESPACE=${OPERATOR_NAMESPACE:-kube-system}' >> $BASH_ENV
            echo 'export OPERATOR_IMAGE=${COMPANY_REPO}/clickhouse-operator:${OPERATOR_VERSION}' >> $BASH_ENV
            echo 'export METRICS_EXPORTER_IMAGE=${COMPANY_REPO}/metrics-exporter:${OPERATOR_VERSION}' >> $BASH_ENV
      - run:
          name: Install operator
          command: |
            sudo apt-get install -y gettext-base
            curl -sL https://github.com/Altinity/clickhouse-operator/raw/master/deploy/operator-web-installer/clickhouse-operator-install.sh | bash -xue
      - run:
          name: Run integration tests
          command: |
            ~/clickhouse-operator/venv/bin/python3 ./tests/test.py --only=operator/* --no-colors
            ~/clickhouse-operator/venv/bin/python3 ./tests/test_metrics_exporter.py --only=metrics_exporter/* --no-colors

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_master:
          filters:
            branches:
              only: master
      - build_branch:
          filters:
            branches:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
  
  build_and_run_e2e_tests:
    jobs:
      - integration_tests:
          filters:
            branches:
              ignore: /^(master|[0-9]+\.[0-9]+\.[0-9]+)/
